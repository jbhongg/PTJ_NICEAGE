{"remainingRequest":"C:\\Users\\multicampus\\Desktop\\공통테스트용\\S05P13B202\\backend\\frontend\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\multicampus\\Desktop\\공통테스트용\\S05P13B202\\backend\\frontend\\src\\views\\contents\\senior_center\\seniorCenter.vue?vue&type=style&index=0&id=581160fb&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\multicampus\\Desktop\\공통테스트용\\S05P13B202\\backend\\frontend\\src\\views\\contents\\senior_center\\seniorCenter.vue","mtime":1629272003948},{"path":"C:\\Users\\multicampus\\Desktop\\공통테스트용\\S05P13B202\\backend\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1629272121244},{"path":"C:\\Users\\multicampus\\Desktop\\공통테스트용\\S05P13B202\\backend\\frontend\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1629272123436},{"path":"C:\\Users\\multicampus\\Desktop\\공통테스트용\\S05P13B202\\backend\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1629272121820},{"path":"C:\\Users\\multicampus\\Desktop\\공통테스트용\\S05P13B202\\backend\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1629272119757},{"path":"C:\\Users\\multicampus\\Desktop\\공통테스트용\\S05P13B202\\backend\\frontend\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1629272122441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoJLyogI3Nlc3Npb24tdGl0bGUgew0KCQl0ZXh0LWFsaWduOiBjZW50ZXI7DQoJfSAqLw0KCS5yb29tLWNvbnRhaW5lciB7DQoJCWJhY2tncm91bmQ6IHdoaXRlOw0KCQloZWlnaHQ6IDEwMCU7DQoJCXBhZGRpbmctbGVmdDogNXB4Ow0KCX0NCgkuc2VjdGlvbiB7DQoJCXBvc2l0aW9uOiByZWxhdGl2ZTsNCgkJaGVpZ2h0OiAxMDAlOw0KCX0NCgkNCgkuc2Vzc2lvbi1tYWluIHsNCgkJaGVpZ2h0OiA4M3ZoOw0KCX0NCg0KCS52aWRlby1jb250YWluZXIgew0KCQltYXJnaW4tYm90dG9tOiAxMHB4Ow0KCQlib3JkZXI6IDFweCBzb2xpZCAjYmNiY2JjOw0KCQkvKiBmaWx0ZXI6IGRyb3Atc2hhZG93KDBweCA0cHggNHB4IHJnYmEoMCwgMCwgMCwgMC4yNSkpOyAqLw0KCX0NCg0KCS5zZXNzaW9uLXNpZGViYXIgew0KCQlwYWRkaW5nOiA1cHg7DQoJCWJvcmRlci1yYWRpdXM6IDMycHg7DQoJCWhlaWdodDogODN2aDsNCgkJLyogZmlsdGVyOiBkcm9wLXNoYWRvdygwcHggNHB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMjUpKTsgKi8NCgl9DQoNCgkuc2lkZWJhci10aXRsZSB7DQoJCWhlaWdodDogM3ZoOw0KCX0NCg0KCS8qIC5jaGF0LWNvbnRhaW5lciB7DQoJCWhlaWdodDogMTAwJTsNCgkJcGFkZGluZzogNHB4Ow0KCQlmaWx0ZXI6IGRyb3Atc2hhZG93KDBweCA0cHggNHB4IHJnYmEoMCwgMCwgMCwgMC4yNSkpOw0KCX0gKi8NCg0KCS5ib3R0b20tYmFyIHsNCgkJbWFyZ2luLXRvcDogMTVweDsNCgl9DQogIC5zZWxlY3QtYnRuIHsNCiAgICBmb250LWZhbWlseTogQmxhY2tIYW5TYW5zOw0KICAgIGZvbnQtc2l6ZTogMzJweDsNCiAgICAvKiBiYWNrZ3JvdW5kOiA2MUFDRjEgIWltcG9ydGFudDsgKi8NCiAgICBib3JkZXItcmFkaXVzOiA0MHB4ICFpbXBvcnRhbnQ7DQoJCWZpbHRlcjogZHJvcC1zaGFkb3coMHB4IDRweCA0cHggcmdiYSgwLCAwLCAwLCAwLjI1KSk7DQogIH0NCg=="},{"version":3,"sources":["C:\\Users\\multicampus\\Desktop\\공통테스트용\\S05P13B202\\backend\\frontend\\src\\views\\contents\\senior_center\\seniorCenter.vue"],"names":[],"mappings":"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","file":"C:/Users/multicampus/Desktop/공통테스트용/S05P13B202/backend/frontend/src/views/contents/senior_center/seniorCenter.vue","sourceRoot":"","sourcesContent":["<template>\r\n\t<div class=\"room-container\" id=\"main-container\">\r\n\t\t<!-- <div id=\"join\" v-if=\"!session\">\r\n\t\t\t<div id=\"join-dialog\" class=\"jumbotron vertical-center\">\r\n\t\t\t\t<h1>Join a video session</h1>\r\n\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<label>Participant</label>\r\n\t\t\t\t\t\t<input v-model=\"myUserName\" class=\"form-control\" type=\"text\" required>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<label>Session</label>\r\n\t\t\t\t\t\t<input v-model=\"mySessionId\" class=\"form-control\" type=\"text\" required>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p class=\"text-center\">\r\n\t\t\t\t\t\t<button class=\"btn btn-lg btn-success\" @click=\"joinSession()\">Join!</button>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div> -->\r\n\r\n\t\t<div class=\"section\" v-if=\"session\">\r\n      <el-row class=\"session-main\">\r\n        <el-col class=\"video-container\" :span=\"18\">\r\n\t\t\t\t\t<el-row id=\"session-title\" justify=\"space-between\">\r\n\t\t\t\t\t\t<!-- <div>{{ mySessionId }}</div> -->\r\n\t\t\t\t\t\t<div>{{myCenterName}} {{roomList[parseInt(sessionId.split('-')[1])]}}방</div>\r\n\t\t\t\t\t\t<el-button type=\"danger\" @click=\"clickSOS\">119 신고</el-button>\r\n\t\t\t\t\t</el-row>\r\n\t\t\t\t\t<el-row>\r\n\t\t\t\t\t\t<el-col :span=\"8\">\r\n\t\t\t\t\t\t\t<UserVideo :stream-manager=\"publisher\" @click=\"updateMainVideoStreamManager(publisher)\"/>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t\t<el-col v-for=\"sub in subscribers\" :key=\"sub.stream.connection.connectionId\" :span=\"8\">\r\n\t\t\t\t\t\t\t<UserVideo :stream-manager=\"sub\" @click=\"updateMainVideoStreamManager(sub)\"/>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t</el-row>\r\n        </el-col>\r\n        <el-col class=\"session-sidebar\" :span=\"6\">\r\n\t\t\t\t\t<SideBar\r\n\t\t\t\t\t\t@handleClick=\"handleClick\"\r\n\t\t\t\t\t\t@getMyMsg=\"getMyMsg\"\r\n\t\t\t\t\t\t:msgs=\"msgs\"\r\n\t\t\t\t\t\t:personnelList=\"personnelList\"\r\n\t\t\t\t\t\t:sessionIndex=\"sessionIndex\"\r\n\t\t\t\t\t\t:mySessionId=\"sessionId\"\r\n\t\t\t\t\t\t:myCenterName=\"myCenterName\"\r\n\t\t\t\t\t\t@changeSession=\"changeSession\"/>\r\n        </el-col>\r\n      </el-row>\r\n\t\t\t<BottomBar\r\n\t\t\t\t:isAudioMuted=\"isAudioMuted\"\r\n\t\t\t\t:isVideoMuted=\"isVideoMuted\"\r\n\t\t\t\t@muteAudio=\"muteAudio\"\r\n\t\t\t\t@muteVideo=\"muteVideo\"\r\n\t\t\t\t@leaveSession=\"leaveSession\"\r\n\t\t\t/>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\nimport { useRouter } from 'vue-router';\r\nimport axios from 'axios';\r\nimport { OpenVidu } from 'openvidu-browser';\r\nimport UserVideo from './components/UserVideo';\r\nimport SideBar from './components/sideBar';\r\nimport BottomBar from './components/bottomBar';\r\n\r\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = 'http://i5b202.p.ssafy.io';\r\naxios.defaults.headers.post['Content-Type'] = 'application/json';\r\nconst OPENVIDU_SERVER_URL = \"https://i5b202.p.ssafy.io:4443\"\r\nconst OPENVIDU_SERVER_SECRET = \"ssafy\"\r\nexport default {\r\n\tname: 'App',\r\n\tcomponents: {\r\n\t\tUserVideo,\r\n\t\tBottomBar,\r\n\t\tSideBar\r\n\t},\r\n\tprops: {\r\n\t\tmySessionId: {\r\n\t\t\ttype: String\r\n\t\t},\r\n\t\tmyUserName: {\r\n\t\t\ttype: String\r\n\t\t},\r\n\t\tmyCenterName: {\r\n\t\t\ttype: String\r\n\t\t}\r\n\t},\r\n\tdata () {\r\n\t\treturn {\r\n\t\t\tOV: undefined,\r\n\t\t\tsession: undefined,\r\n\t\t\tmainStreamManager: undefined,\r\n\t\t\tpublisher: undefined,\r\n\t\t\tsubscribers: [],\r\n      msgs: [],\r\n\t\t\tmessageSenderObj: undefined,\r\n\t\t\tisVideoMuted: false,\r\n\t\t\tisAudioMuted: false,\r\n\t\t\tactiveName: 'first',\r\n\t\t\tpersonnelList: [],\r\n\t\t\tsessionIndex: undefined,\r\n\t\t\tsessionId: this.mySessionId,\r\n\t\t\troomList: ['개나리', '진달래', '장미', '매화', '해바라기']\r\n\t\t}\r\n\t},\r\n\tcomputed: {\r\n\t\troomIndex: () => {\r\n\t\t\treturn this.mySessionId\r\n\t\t}\r\n\t},\r\n\tmounted() {\r\n\t\tconsole.log('urllll:', OPENVIDU_SERVER_URL)\r\n\t\tthis.joinSession()\r\n\t\tconsole.log(this.session)\r\n\t},\r\n\r\n\tmethods: {\r\n\t\thandleClick() {\r\n\t\t\tconst personnelListTmp = [0, 0, 0, 0, 0]\r\n\t\t\tthis.$store.commit('root/loadingOn')\r\n\t\t\taxios.get(`${OPENVIDU_SERVER_URL}/openvidu/api/sessions`, {\r\n\t\t\t\tauth: {\r\n\t\t\t\t\tusername: 'OPENVIDUAPP',\r\n\t\t\t\t\tpassword: OPENVIDU_SERVER_SECRET\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(res => {\r\n\t\t\t\tthis.$store.commit('root/loadingOff')\r\n\t\t\t\tconst sessions = res.data.content\r\n\t\t\t\tconst tmp = this.sessionId.split('-')\r\n\t\t\t\tconst sessionId = tmp[0]\r\n\t\t\t\t//!!\r\n\t\t\t\tthis.sessionIndex = parseInt(tmp[1])\r\n\t\t\t\tsessions.forEach(session => {\r\n\t\t\t\t\tconst split_str = session.id.split('-')\r\n\t\t\t\t\tif (sessionId == split_str[0]) {\r\n\t\t\t\t\t\tconst index = parseInt(split_str[1])\r\n\t\t\t\t\t\tpersonnelListTmp[index] = session.connections.numberOfElements\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t//!!\r\n\t\t\t\tthis.personnelList = personnelListTmp\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tthis.$store.commit('root/loadingOff')\r\n\t\t\t\talert(err)\r\n\t\t\t})\r\n\t\t},\r\n\t\tmuteAudio() {\r\n\t\t\tthis.publisher.publishAudio(this.isAudioMuted)\r\n\t\t\tthis.isAudioMuted = !this.isAudioMuted\r\n\t\t},\r\n\t\tmuteVideo() {\r\n\t\t\tthis.publisher.publishVideo(this.isVideoMuted)\r\n\t\t\tthis.isVideoMuted = !this.isVideoMuted\r\n\t\t},\r\n    getMyMsg (myMsg) {\r\n      this.session.signal({\r\n        data: myMsg,\r\n        to: [],\r\n        type: 'my-chat'\r\n      })\r\n      .then(() => {\r\n        console.log('메시지성공적으로 보냄')\r\n      })\r\n      .catch(error => {\r\n        console.err(error)\r\n      })\r\n    },\r\n\t\tjoinSession () {\r\n\t\t\t// --- Get an OpenVidu object ---\r\n\t\t\tthis.OV = new OpenVidu();\r\n\t\t\t// --- Init a session ---\r\n\t\t\tthis.session = this.OV.initSession();\r\n\t\t\t// --- Specify the actions when events take place in the session ---\r\n\t\t\t// On every new Stream received...\r\n\t\t\tthis.session.on('streamCreated', ({ stream }) => {\r\n\t\t\t\tconst subscriber = this.session.subscribe(stream);\r\n\t\t\t\tthis.subscribers.push(subscriber);\r\n\t\t\t});\r\n\t\t\t// On every Stream destroyed...\r\n\t\t\tthis.session.on('streamDestroyed', ({ stream }) => {\r\n\t\t\t\tconst index = this.subscribers.indexOf(stream.streamManager, 0);\r\n\t\t\t\tif (index >= 0) {\r\n\t\t\t\t\tthis.subscribers.splice(index, 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t// On every asynchronous exception...\r\n\t\t\tthis.session.on('exception', ({ exception }) => {\r\n\t\t\t\tconsole.warn(exception);\r\n\t\t\t});\r\n\t\t\t// 메세지가 도착 시: 메시지 배열에 {message: 메시지내용, isMe: true/false} 형태로 저장\r\n      this.session.on('signal', (event) => {\r\n        const tmp = this.msgs.slice()\r\n\t\t\t\tlet isMe = false\r\n\t\t\t\t// console.log('11', this.publisher)\r\n\t\t\t\t// console.log(\"사용자이름: \",this.publisher.stream.connection.data)\r\n\t\t\t\t// console.log(\"커넥션아이디: \",this.publisher.stream.connection.connectionId)\r\n\t\t\t\t// console.log(\"커넥션아이디: \", event.from)\r\n\t\t\t\t// console.log('123',JSON.parse(event.from.data).clientData)\r\n\t\t\t\tif (event.from.connectionId == this.publisher.stream.connection.connectionId) {\r\n\t\t\t\t\tisMe = true\r\n\t\t\t\t}\r\n\t\t\t\tconst { clientData } = JSON.parse(event.from.data)\r\n\t\t\t\tconsole.log('메시지:', event)\r\n        tmp.push({message: event.data, isMe: isMe, username: clientData})\r\n\t\t\t\tthis.msgs = tmp\r\n\t\t\t\tthis.messageSenderObj = event.from\r\n\t\t\t\t// tts 요청\r\n\t\t\t\tlet source; \r\n\t\t\t\tlet context; \r\n\t\t\t\tcontext = new AudioContext();\r\n\t\t\t\tthis.$store.dispatch('requestKakaoTTS', event.data)\r\n\t\t\t\t.then(res => {\r\n\t\t\t\t\tcontext.decodeAudioData(res.data, function(buffer) {\r\n\t\t\t\t\t\t\tsource = context.createBufferSource();\r\n\t\t\t\t\t\t\tsource.buffer = buffer;\r\n\t\t\t\t\t\t\tsource.connect(context.destination);\r\n\t\t\t\t\t\t\tsource.start(); \r\n\t\t\t\t\t\t});  \r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\tconsole.log(err)\r\n\t\t\t\t})\r\n      })\r\n\r\n\t\t\tthis.session.on('connectionCreated', (event) => {\r\n\t\t\t\tconsole.log(\"이벤트 커넥션 발생\", event.connection)\r\n\t\t\t})\r\n\r\n\t\t\t// --- Connect to the session with a valid user token ---\r\n\t\t\t// 'getToken' method is simulating what your server-side should do.\r\n\t\t\t// 'token' parameter should be retrieved and returned by your own backend\r\n\t\t\tthis.getToken(this.sessionId).then(token => {\r\n\t\t\t\tthis.session.connect(token, { clientData: this.myUserName })\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t// --- Get your own camera stream with the desired properties ---\r\n\t\t\t\t\t\tlet publisher = this.OV.initPublisher(undefined, {\r\n\t\t\t\t\t\t\taudioSource: undefined, // The source of audio. If undefined default microphone\r\n\t\t\t\t\t\t\tvideoSource: undefined, // The source of video. If undefined default webcam\r\n\t\t\t\t\t\t\tpublishAudio: true,  \t// Whether you want to start publishing with your audio unmuted or not\r\n\t\t\t\t\t\t\tpublishVideo: true,  \t// Whether you want to start publishing with your video enabled or not\r\n\t\t\t\t\t\t\tresolution: '640x480',  // The resolution of your video\r\n\t\t\t\t\t\t\tframeRate: 30,\t\t\t// The frame rate of your video\r\n\t\t\t\t\t\t\tinsertMode: 'APPEND',\t// How the video is inserted in the target element 'video-container'\r\n\t\t\t\t\t\t\tmirror: false       \t// Whether to mirror your local video or not\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tthis.mainStreamManager = publisher;\r\n\t\t\t\t\t\tthis.publisher = publisher;\r\n\t\t\t\t\t\t// --- Publish your stream ---\r\n\t\t\t\t\t\tthis.session.publish(this.publisher);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log('There was an error connecting to the session:', error.code, error.message);\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t\t\twindow.addEventListener('beforeunload', this.leaveSession)\r\n\t\t},\r\n\t\tleaveSession () {\r\n\t\t\t// --- Leave the session by calling 'disconnect' method over the Session object ---\r\n\t\t\tif (this.session) this.session.disconnect();\r\n\t\t\tthis.session = undefined;\r\n\t\t\tthis.mainStreamManager = undefined;\r\n\t\t\tthis.publisher = undefined;\r\n\t\t\tthis.subscribers = [];\r\n\t\t\tthis.OV = undefined;\r\n\t\t\twindow.removeEventListener('beforeunload', this.leaveSession);\r\n\t\t\tthis.leave()\r\n\t\t},\r\n\t\tchangeSession (data) {\r\n\t\t\tconst idx = data.idx\r\n\t\t\tconst personnel = data.personnel\r\n\t\t\t// --- Leave the session by calling 'disconnect' method over the Session object ---\r\n\t\t\t\r\n      if (personnel >= 9) {\r\n\t\t\t\talert('정원초과로 입장할 수 없습니다.')\r\n      } else {\r\n\t\t\t\t// 세션 종료\r\n\t\t\t\tif (this.session) this.session.disconnect();\r\n\t\t\t\tthis.session = undefined;\r\n\t\t\t\tthis.mainStreamManager = undefined;\r\n\t\t\t\tthis.publisher = undefined;\r\n\t\t\t\tthis.subscribers = [];\r\n\t\t\t\tthis.OV = undefined;\r\n\t\t\t\twindow.removeEventListener('beforeunload', this.leaveSession);\r\n\t\t\t\t// 새로운 세션 입장\r\n\t\t\t\tthis.sessionIndex = idx\r\n        this.sessionId = this.sessionId.split('-')[0] + '-' + String(idx)\r\n\t\t\t\tthis.joinSession()\r\n\t\t\t\tconsole.log(this.sessionId, this.myUserName, this.myCenterName)\r\n\t\t\t\t// 방 인원수 갱신\r\n\t\t\t\tthis.$store.commit('root/loadingOn')\r\n\t\t\t\taxios.get(`${OPENVIDU_SERVER_URL}/openvidu/api/sessions`, {\r\n\t\t\t\t\tauth: {\r\n\t\t\t\t\t\tusername: 'OPENVIDUAPP',\r\n\t\t\t\t\t\tpassword: OPENVIDU_SERVER_SECRET\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.then(res => {\r\n\t\t\t\t\tthis.$store.commit('root/loadingOff')\r\n\t\t\t\t\tconst personnelListTmp = [0, 0, 0, 0, 0]\r\n\t\t\t\t\tthis.$store.commit('root/loadingOff')\r\n\t\t\t\t\tconst sessions = res.data.content\r\n\t\t\t\t\tconst sessionId = this.sessionId.split('-')[0]\r\n\t\t\t\t\tsessions.forEach(session => {\r\n\t\t\t\t\t\tconst split_str = session.id.split('-')\r\n\t\t\t\t\t\tif (sessionId == split_str[0]) {\r\n\t\t\t\t\t\t\tconst index = parseInt(split_str[1])\r\n\t\t\t\t\t\t\tpersonnelListTmp[index] = session.connections.numberOfElements\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\tpersonnelListTmp[idx] += 1\r\n\t\t\t\t\t//!!\r\n\t\t\t\t\tthis.personnelList = personnelListTmp\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\tthis.$store.commit('root/loadingOff')\r\n\t\t\t\t\talert(err)\r\n\t\t\t\t})\r\n\t\t\t\t} \r\n\t\t},\r\n\t\tupdateMainVideoStreamManager (stream) {\r\n\t\t\tif (this.mainStreamManager === stream) return;\r\n\t\t\tthis.mainStreamManager = stream;\r\n\t\t},\r\n\r\n\t\tgetToken (mySessionId) {\r\n\t\t\treturn this.createSession(mySessionId).then(sessionId => this.createToken(sessionId));\r\n\t\t},\r\n\t\t// See https://docs.openvidu.io/en/stable/reference-docs/REST-API/#post-openviduapisessions\r\n\t\tcreateSession (sessionId) {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\taxios\r\n\t\t\t\t\t.post(`${OPENVIDU_SERVER_URL}/openvidu/api/sessions`, JSON.stringify({\r\n\t\t\t\t\t\tcustomSessionId: sessionId\r\n\t\t\t\t\t}), {\r\n\t\t\t\t\t\tauth: {\r\n\t\t\t\t\t\t\tusername: 'OPENVIDUAPP',\r\n\t\t\t\t\t\t\tpassword: OPENVIDU_SERVER_SECRET,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then(response => response.data)\r\n\t\t\t\t\t.then(data => resolve(data.id))\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tif (error.response.status === 409) {\r\n\t\t\t\t\t\t\tresolve(sessionId);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.warn(`No connection to OpenVidu Server. This may be a certificate error at ${OPENVIDU_SERVER_URL}`);\r\n\t\t\t\t\t\t\tif (window.confirm(`No connection to OpenVidu Server. This may be a certificate error at ${OPENVIDU_SERVER_URL}\\n\\nClick OK to navigate and accept it. If no certificate warning is shown, then check that your OpenVidu Server is up and running at \"${OPENVIDU_SERVER_URL}\"`)) {\r\n\t\t\t\t\t\t\t\tlocation.assign(`${OPENVIDU_SERVER_URL}/accept-certificate`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treject(error.response);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\t\t// See https://docs.openvidu.io/en/stable/reference-docs/REST-API/#post-openviduapisessionsltsession_idgtconnection\r\n\t\tcreateToken (sessionId) {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\taxios\r\n\t\t\t\t\t.post(`${OPENVIDU_SERVER_URL}/openvidu/api/sessions/${sessionId}/connection`, {}, {\r\n\t\t\t\t\t\tauth: {\r\n\t\t\t\t\t\t\tusername: 'OPENVIDUAPP',\r\n\t\t\t\t\t\t\tpassword: OPENVIDU_SERVER_SECRET,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then(response => response.data)\r\n\t\t\t\t\t.then(data => resolve(data.token))\r\n\t\t\t\t\t.catch(error => reject(error.response));\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tclickSOS () {\r\n\t\t\tconst userId = this.$store.getters['root/getMyId']\r\n\t\t\tthis.$store.dispatch('root/requestSOS', userId)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tif (res.data.status == \"success\") {\r\n\t\t\t\t\talert(\"119 요청 완료.\")\r\n\t\t\t\t} else {\r\n\t\t\t\t\talert('119 호출에 실패하였습니다.')\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch(() => {\r\n\t\t\t\talert('119 호출에 실패하였습니다.')\r\n\t\t\t})\r\n\t\t}\r\n\t},\r\n\tsetup() {\r\n\t\tconst router = useRouter()\r\n\r\n\t\tconst leave = () => {\r\n\t\t\trouter.push({\r\n\t\t\t\tname: 'Home'\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn { leave }\r\n\r\n\t}\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\t/* #session-title {\r\n\t\ttext-align: center;\r\n\t} */\r\n\t.room-container {\r\n\t\tbackground: white;\r\n\t\theight: 100%;\r\n\t\tpadding-left: 5px;\r\n\t}\r\n\t.section {\r\n\t\tposition: relative;\r\n\t\theight: 100%;\r\n\t}\r\n\t\r\n\t.session-main {\r\n\t\theight: 83vh;\r\n\t}\r\n\r\n\t.video-container {\r\n\t\tmargin-bottom: 10px;\r\n\t\tborder: 1px solid #bcbcbc;\r\n\t\t/* filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25)); */\r\n\t}\r\n\r\n\t.session-sidebar {\r\n\t\tpadding: 5px;\r\n\t\tborder-radius: 32px;\r\n\t\theight: 83vh;\r\n\t\t/* filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25)); */\r\n\t}\r\n\r\n\t.sidebar-title {\r\n\t\theight: 3vh;\r\n\t}\r\n\r\n\t/* .chat-container {\r\n\t\theight: 100%;\r\n\t\tpadding: 4px;\r\n\t\tfilter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25));\r\n\t} */\r\n\r\n\t.bottom-bar {\r\n\t\tmargin-top: 15px;\r\n\t}\r\n  .select-btn {\r\n    font-family: BlackHanSans;\r\n    font-size: 32px;\r\n    /* background: 61ACF1 !important; */\r\n    border-radius: 40px !important;\r\n\t\tfilter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25));\r\n  }\r\n</style>\r\n"]}]}