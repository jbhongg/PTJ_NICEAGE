"use strict";
/*
 * (C) Copyright 2017-2020 OpenVidu (https://openvidu.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebRtcPeerSendrecv = exports.WebRtcPeerSendonly = exports.WebRtcPeerRecvonly = exports.WebRtcPeer = void 0;
var freeice = require("freeice");
var uuid_1 = require("uuid");
var ExceptionEvent_1 = require("../Events/ExceptionEvent");
var OpenViduLogger_1 = require("../Logger/OpenViduLogger");
var Platform_1 = require("../Utils/Platform");
/**
 * @hidden
 */
var logger = OpenViduLogger_1.OpenViduLogger.getInstance();
/**
 * @hidden
 */
var platform;
/*
 * Table of sender video encodings for simulcast.
 * Note that this is just a polite request, but the browser is free to honor it
 * or just play by its own rules.
 *
 * Chrome imposes some restrictions based on the size of the video, max bitrate,
 * and available bandwidth. Check here for the video size table:
 * https://chromium.googlesource.com/external/webrtc/+/master/media/engine/simulcast.cc#90
 *
 * | Size (px) | Bitrate (kbps) | Max Layers |
 * |----------:|---------------:|-----------:|
 * | 1920x1080 |           5000 |          3 |
 * |  1280x720 |           2500 |          3 |
 * |   960x540 |           1200 |          3 |
 * |   640x360 |            700 |          2 |
 * |   480x270 |            450 |          2 |
 * |   320x180 |            200 |          1 |
 *
 * Firefox will send as many layers as we request, but there are some limits on
 * their bitrate:
 *
 * | Size (px) | Min bitrate (bps) | Start bitrate (bps) | Max bitrate (bps) |       Comments |
 * |----------:|------------------:|--------------------:|------------------:|---------------:|
 * | 1920x1200 |              1500 |                2000 |             10000 |   >HD (3K, 4K) |
 * |  1280x720 |              1200 |                1500 |              5000 |  HD ~1080-1200 |
 * |   800x480 |               200 |                 800 |              2500 |        HD ~720 |
 * |   480x270 |               150 |                 500 |              2000 |           WVGA |
 * |   400x240 |               125 |                 300 |              1300 |            VGA |
 * |   176x144 |               100 |                 150 |               500 |     WQVGA, CIF |
 * |         0 |                40 |                  80 |               250 | QCIF and below |
 *
 * Docs for `RTCRtpEncodingParameters`: https://www.w3.org/TR/webrtc/#dom-rtcrtpencodingparameters
 * Most interesting members are `maxBitrate` and `scaleResolutionDownBy`.
 *
 * `scaleResolutionDownBy` is specified as 4:2:1 which is the same that the default.
 * The WebRTC spec says this (https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-addtransceiver):
 *     > If the scaleResolutionDownBy attributes of sendEncodings are still undefined, initialize
 *     > each encoding's scaleResolutionDownBy to 2^(length of sendEncodings - encoding index
 *     > - 1). This results in smaller-to-larger resolutions where the last encoding has no scaling
 *     > applied to it, e.g. 4:2:1 if the length is 3.
 * However, Firefox doesn't seem to implement this default yet. Mediasoup never gets to select
 * an output layer.
 *
 * `maxBitrate` is left unspecified, to let the client decide based on its own
 * bandwidth limit detection.
 */
var simulcastVideoEncodings = [
    {
        rid: "r0",
        scaleResolutionDownBy: 4,
    },
    {
        rid: "r1",
        scaleResolutionDownBy: 2,
    },
    {
        rid: "r2",
        scaleResolutionDownBy: 1,
    },
];
var WebRtcPeer = /** @class */ (function () {
    function WebRtcPeer(configuration) {
        var _this = this;
        this.remoteCandidatesQueue = [];
        this.localCandidatesQueue = [];
        this.iceCandidateList = [];
        this.candidategatheringdone = false;
        platform = Platform_1.PlatformUtils.getInstance();
        this.configuration = __assign(__assign({}, configuration), { iceServers: !!configuration.iceServers &&
                configuration.iceServers.length > 0
                ? configuration.iceServers
                : freeice(), mediaStream: configuration.mediaStream !== undefined
                ? configuration.mediaStream
                : null, mode: !!configuration.mode ? configuration.mode : "sendrecv", id: !!configuration.id ? configuration.id : this.generateUniqueId() });
        this.pc = new RTCPeerConnection({ iceServers: this.configuration.iceServers });
        this.pc.addEventListener('icecandidate', function (event) {
            if (event.candidate != null) {
                var candidate = event.candidate;
                _this.configuration.onIceCandidate(candidate);
                if (candidate.candidate !== '') {
                    _this.localCandidatesQueue.push({ candidate: candidate.candidate });
                }
            }
        });
        this.pc.addEventListener('signalingstatechange', function () {
            if (_this.pc.signalingState === 'stable') {
                while (_this.iceCandidateList.length > 0) {
                    var candidate = _this.iceCandidateList.shift();
                    _this.pc.addIceCandidate(candidate);
                }
            }
        });
    }
    WebRtcPeer.prototype.getId = function () {
        return this.configuration.id;
    };
    /**
     * This method frees the resources used by WebRtcPeer
     */
    WebRtcPeer.prototype.dispose = function () {
        logger.debug('Disposing WebRtcPeer');
        if (this.pc) {
            if (this.pc.signalingState === 'closed') {
                return;
            }
            this.pc.close();
            this.remoteCandidatesQueue = [];
            this.localCandidatesQueue = [];
        }
    };
    /**
     * Creates an SDP offer from the local RTCPeerConnection to send to the other peer
     * Only if the negotiation was initiated by this peer
     */
    WebRtcPeer.prototype.createOffer = function () {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var _i, _a, track, tcInit, tc, sendParams, _b, _c, kind, hasAudio, hasVideo, options;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!("addTransceiver" in this.pc)) return [3 /*break*/, 7];
                        logger.debug("[createOffer] Method RTCPeerConnection.addTransceiver() is available; using it");
                        if (!(this.configuration.mode !== "recvonly")) return [3 /*break*/, 5];
                        // To send media, assume that all desired media tracks
                        // have been already added by higher level code to our
                        // MediaStream.
                        if (!this.configuration.mediaStream) {
                            reject(new Error(this.configuration.mode + " direction requested, but no stream was configured to be sent"));
                            return [2 /*return*/];
                        }
                        _i = 0, _a = this.configuration.mediaStream.getTracks();
                        _d.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        track = _a[_i];
                        tcInit = {
                            direction: this.configuration.mode,
                            streams: [this.configuration.mediaStream],
                        };
                        if (this.configuration.simulcast && track.kind === "video") {
                            tcInit.sendEncodings = simulcastVideoEncodings;
                        }
                        tc = this.pc.addTransceiver(track, tcInit);
                        if (!(this.configuration.simulcast && track.kind === "video")) return [3 /*break*/, 3];
                        sendParams = tc.sender.getParameters();
                        if (!(!("encodings" in sendParams) ||
                            sendParams.encodings.length !== tcInit.sendEncodings.length)) return [3 /*break*/, 3];
                        sendParams.encodings = tcInit.sendEncodings;
                        return [4 /*yield*/, tc.sender.setParameters(sendParams)];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        // To just receive media, create new recvonly transceivers.
                        for (_b = 0, _c = ["audio", "video"]; _b < _c.length; _b++) {
                            kind = _c[_b];
                            // Check if the media kind should be used.
                            if (!this.configuration.mediaConstraints[kind]) {
                                continue;
                            }
                            this.configuration.mediaStream = new MediaStream();
                            this.pc.addTransceiver(kind, {
                                direction: this.configuration.mode,
                                streams: [this.configuration.mediaStream],
                            });
                        }
                        _d.label = 6;
                    case 6:
                        this.pc
                            .createOffer()
                            .then(function (sdpOffer) { return resolve(sdpOffer); })
                            .catch(function (error) { return reject(error); });
                        return [3 /*break*/, 8];
                    case 7:
                        logger.error("[createOffer] Method RTCPeerConnection.addTransceiver() is NOT available; using LEGACY offerToReceive{Audio,Video}");
                        // DEPRECATED LEGACY METHOD: Old WebRTC versions don't implement
                        // Transceivers, and instead depend on the deprecated
                        // "offerToReceiveAudio" and "offerToReceiveVideo".
                        if (!!this.configuration.mediaStream) {
                            this.deprecatedPeerConnectionTrackApi();
                        }
                        hasAudio = this.configuration.mediaConstraints.audio;
                        hasVideo = this.configuration.mediaConstraints.video;
                        options = {
                            offerToReceiveAudio: this.configuration.mode !== "sendonly" && hasAudio,
                            offerToReceiveVideo: this.configuration.mode !== "sendonly" && hasVideo,
                        };
                        logger.debug("RTCPeerConnection.createOffer() options:", JSON.stringify(options));
                        this.pc
                            // @ts-ignore - Compiler is too clever and thinks this branch will never execute.
                            .createOffer(options)
                            .then(function (sdpOffer) { return resolve(sdpOffer); })
                            .catch(function (error) { return reject(error); });
                        _d.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        }); });
    };
    WebRtcPeer.prototype.deprecatedPeerConnectionTrackApi = function () {
        for (var _i = 0, _a = this.configuration.mediaStream.getTracks(); _i < _a.length; _i++) {
            var track = _a[_i];
            this.pc.addTrack(track, this.configuration.mediaStream);
        }
    };
    /**
     * Creates an SDP answer from the local RTCPeerConnection to send to the other peer
     * Only if the negotiation was initiated by the other peer
     */
    WebRtcPeer.prototype.createAnswer = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            // TODO: Delete this conditional when all supported browsers are
            // modern enough to implement the Transceiver methods.
            if ("getTransceivers" in _this.pc) {
                logger.debug("[createAnswer] Method RTCPeerConnection.getTransceivers() is available; using it");
                var _loop_1 = function (kind) {
                    // Check if the media kind should be used.
                    if (!_this.configuration.mediaConstraints[kind]) {
                        return "continue";
                    }
                    var tc = _this.pc
                        .getTransceivers()
                        .find(function (tc) { return tc.receiver.track.kind === kind; });
                    if (tc) {
                        // Enforce our desired direction.
                        tc.direction = _this.configuration.mode;
                    }
                    else {
                        reject(new Error(kind + " requested, but no transceiver was created from remote description"));
                    }
                };
                // Ensure that the PeerConnection already contains one Transceiver
                // for each kind of media.
                // The Transceivers should have been already created internally by
                // the PC itself, when `pc.setRemoteDescription(sdpOffer)` was called.
                for (var _i = 0, _a = ["audio", "video"]; _i < _a.length; _i++) {
                    var kind = _a[_i];
                    _loop_1(kind);
                }
                _this.pc
                    .createAnswer()
                    .then(function (sdpAnswer) { return resolve(sdpAnswer); })
                    .catch(function (error) { return reject(error); });
            }
            else {
                // TODO: Delete else branch when all supported browsers are
                // modern enough to implement the Transceiver methods
                var offerAudio = void 0, offerVideo = true;
                if (!!_this.configuration.mediaConstraints) {
                    offerAudio = (typeof _this.configuration.mediaConstraints.audio === 'boolean') ?
                        _this.configuration.mediaConstraints.audio : true;
                    offerVideo = (typeof _this.configuration.mediaConstraints.video === 'boolean') ?
                        _this.configuration.mediaConstraints.video : true;
                    var constraints = {
                        offerToReceiveAudio: offerAudio,
                        offerToReceiveVideo: offerVideo
                    };
                    _this.pc.createAnswer(constraints).then(function (sdpAnswer) {
                        resolve(sdpAnswer);
                    }).catch(function (error) {
                        reject(error);
                    });
                }
            }
            // else, there is nothing to do; the legacy createAnswer() options do
            // not offer any control over which tracks are included in the answer.
        });
    };
    /**
     * This peer initiated negotiation. Step 1/4 of SDP offer-answer protocol
     */
    WebRtcPeer.prototype.processLocalOffer = function (offer) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.pc.setLocalDescription(offer)
                .then(function () {
                var localDescription = _this.pc.localDescription;
                if (!!localDescription) {
                    logger.debug('Local description set', localDescription.sdp);
                    resolve();
                }
                else {
                    reject('Local description is not defined');
                }
            })
                .catch(function (error) {
                reject(error);
            });
        });
    };
    /**
     * Other peer initiated negotiation. Step 2/4 of SDP offer-answer protocol
     */
    WebRtcPeer.prototype.processRemoteOffer = function (sdpOffer) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var offer = {
                type: 'offer',
                sdp: sdpOffer
            };
            logger.debug('SDP offer received, setting remote description', offer);
            if (_this.pc.signalingState === 'closed') {
                reject('RTCPeerConnection is closed when trying to set remote description');
            }
            _this.setRemoteDescription(offer)
                .then(function () {
                resolve();
            })
                .catch(function (error) {
                reject(error);
            });
        });
    };
    /**
     * Other peer initiated negotiation. Step 3/4 of SDP offer-answer protocol
     */
    WebRtcPeer.prototype.processLocalAnswer = function (answer) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            logger.debug('SDP answer created, setting local description');
            if (_this.pc.signalingState === 'closed') {
                reject('RTCPeerConnection is closed when trying to set local description');
            }
            _this.pc.setLocalDescription(answer)
                .then(function () { return resolve(); })
                .catch(function (error) { return reject(error); });
        });
    };
    /**
     * This peer initiated negotiation. Step 4/4 of SDP offer-answer protocol
     */
    WebRtcPeer.prototype.processRemoteAnswer = function (sdpAnswer) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var answer = {
                type: 'answer',
                sdp: sdpAnswer
            };
            logger.debug('SDP answer received, setting remote description');
            if (_this.pc.signalingState === 'closed') {
                reject('RTCPeerConnection is closed when trying to set remote description');
            }
            _this.setRemoteDescription(answer)
                .then(function () { return resolve(); })
                .catch(function (error) { return reject(error); });
        });
    };
    /**
     * @hidden
     */
    WebRtcPeer.prototype.setRemoteDescription = function (sdp) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.pc.setRemoteDescription(sdp)];
            });
        });
    };
    /**
     * Callback function invoked when an ICE candidate is received
     */
    WebRtcPeer.prototype.addIceCandidate = function (iceCandidate) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            logger.debug('Remote ICE candidate received', iceCandidate);
            _this.remoteCandidatesQueue.push(iceCandidate);
            switch (_this.pc.signalingState) {
                case 'closed':
                    reject(new Error('PeerConnection object is closed'));
                    break;
                case 'stable':
                    if (!!_this.pc.remoteDescription) {
                        _this.pc.addIceCandidate(iceCandidate).then(function () { return resolve(); }).catch(function (error) { return reject(error); });
                    }
                    else {
                        _this.iceCandidateList.push(iceCandidate);
                        resolve();
                    }
                    break;
                default:
                    _this.iceCandidateList.push(iceCandidate);
                    resolve();
            }
        });
    };
    WebRtcPeer.prototype.addIceConnectionStateChangeListener = function (otherId) {
        var _this = this;
        this.pc.addEventListener('iceconnectionstatechange', function () {
            var iceConnectionState = _this.pc.iceConnectionState;
            switch (iceConnectionState) {
                case 'disconnected':
                    // Possible network disconnection
                    var msg1 = 'IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to "disconnected". Possible network disconnection';
                    logger.warn(msg1);
                    _this.configuration.onIceConnectionStateException(ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_DISCONNECTED, msg1);
                    break;
                case 'failed':
                    var msg2 = 'IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') to "failed"';
                    logger.error(msg2);
                    _this.configuration.onIceConnectionStateException(ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_FAILED, msg2);
                    break;
                case 'closed':
                    logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to "closed"');
                    break;
                case 'new':
                    logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to "new"');
                    break;
                case 'checking':
                    logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to "checking"');
                    break;
                case 'connected':
                    logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to "connected"');
                    break;
                case 'completed':
                    logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to "completed"');
                    break;
            }
        });
    };
    /**
     * @hidden
     */
    WebRtcPeer.prototype.generateUniqueId = function () {
        return uuid_1.v4();
    };
    return WebRtcPeer;
}());
exports.WebRtcPeer = WebRtcPeer;
var WebRtcPeerRecvonly = /** @class */ (function (_super) {
    __extends(WebRtcPeerRecvonly, _super);
    function WebRtcPeerRecvonly(configuration) {
        var _this = this;
        configuration.mode = 'recvonly';
        _this = _super.call(this, configuration) || this;
        return _this;
    }
    return WebRtcPeerRecvonly;
}(WebRtcPeer));
exports.WebRtcPeerRecvonly = WebRtcPeerRecvonly;
var WebRtcPeerSendonly = /** @class */ (function (_super) {
    __extends(WebRtcPeerSendonly, _super);
    function WebRtcPeerSendonly(configuration) {
        var _this = this;
        configuration.mode = 'sendonly';
        _this = _super.call(this, configuration) || this;
        return _this;
    }
    return WebRtcPeerSendonly;
}(WebRtcPeer));
exports.WebRtcPeerSendonly = WebRtcPeerSendonly;
var WebRtcPeerSendrecv = /** @class */ (function (_super) {
    __extends(WebRtcPeerSendrecv, _super);
    function WebRtcPeerSendrecv(configuration) {
        var _this = this;
        configuration.mode = 'sendrecv';
        _this = _super.call(this, configuration) || this;
        return _this;
    }
    return WebRtcPeerSendrecv;
}(WebRtcPeer));
exports.WebRtcPeerSendrecv = WebRtcPeerSendrecv;
//# sourceMappingURL=WebRtcPeer.js.map